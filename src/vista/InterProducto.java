package vista;

import conexion.Conexion;
import controlador.Ctrl_Producto;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import modelo.Producto;

/**
 *
 * @author Admin
 */
public class InterProducto extends javax.swing.JInternalFrame {

    int obtenerIdCategoriaCombo = 0;
    private double Precio;
    
    public InterProducto() {
        initComponents();
        setSize(new Dimension (400, 300));
        setTitle ("Nuevo Producto");
        CargarComboCategoria();
        Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        int x = (screenSize.width - this.getWidth()) / 2;
        int y = (screenSize.height - this.getHeight()) / 2;
        setLocation(x, y);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        Txt_cantidadExistente = new javax.swing.JTextField();
        Txt_precio = new javax.swing.JTextField();
        Txt_stockMinimo = new javax.swing.JTextField();
        Txt_nombre = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        Txt_stockMaximo = new javax.swing.JTextField();
        jComboBox_seleccioneCategoria = new javax.swing.JComboBox<>();
        button_Guardar = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Nuevo Producto");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 10, -1, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Nombre");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 80, -1, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Precio");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 110, -1, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Cantidad Existente");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, -1, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Stock Minimo");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 170, -1, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Stock Maximo");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 200, -1, -1));

        Txt_cantidadExistente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Txt_cantidadExistenteActionPerformed(evt);
            }
        });
        getContentPane().add(Txt_cantidadExistente, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 140, 140, -1));
        getContentPane().add(Txt_precio, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 110, 140, -1));
        getContentPane().add(Txt_stockMinimo, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 170, 140, -1));

        Txt_nombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Txt_nombreActionPerformed(evt);
            }
        });
        getContentPane().add(Txt_nombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 80, 140, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("Categoria");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 50, -1, -1));
        getContentPane().add(Txt_stockMaximo, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 200, 140, -1));

        jComboBox_seleccioneCategoria.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jComboBox_seleccioneCategoria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Categoria", "Item 2", "Item 3", "Item 4" }));
        jComboBox_seleccioneCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_seleccioneCategoriaActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox_seleccioneCategoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 50, 140, -1));

        button_Guardar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        button_Guardar.setText("Guardar");
        button_Guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_GuardarActionPerformed(evt);
            }
        });
        getContentPane().add(button_Guardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 230, 140, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Txt_cantidadExistenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Txt_cantidadExistenteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Txt_cantidadExistenteActionPerformed

    private void jComboBox_seleccioneCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_seleccioneCategoriaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox_seleccioneCategoriaActionPerformed

    private void button_GuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_GuardarActionPerformed
        Producto producto = new Producto();
        Ctrl_Producto controlProducto = new Ctrl_Producto();
        String categoria = "";
        categoria = jComboBox_seleccioneCategoria.getSelectedItem().toString().trim();
        
        if(Txt_nombre.getText().equals("") || Txt_precio.getText().equals("") || Txt_cantidadExistente.getText().equals("") || Txt_stockMinimo.getText().equals("") || Txt_stockMaximo.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Complete todos los campos");
        }else{
            //verificar si el producto ya existe
            if(!controlProducto.productoExistente(Txt_nombre.getText().trim())){
                
                if(categoria.equalsIgnoreCase("Seleccione categoria")){
                    JOptionPane.showMessageDialog(null, "Seleccione categoria");
                }else{
                    try{
                        
                    
                        
                        producto.setNombre(Txt_nombre.getText().trim());
                        String precioTXT = Txt_precio.getText().trim();
                        // Elimina los puntos de los miles y reemplaza la coma decimal por un punto
                        precioTXT = precioTXT.replace(".", "");
                        precioTXT = precioTXT.replace(",", ".");

                        try {
                            Precio = Double.parseDouble(precioTXT);
                            producto.setPrecio(Precio);

                            // Asigna los otros valores con los nombres existentes
                            producto.setCantidad_existente(Integer.parseInt(Txt_cantidadExistente.getText().trim()));
                            producto.setStock_minimo(Integer.parseInt(Txt_stockMinimo.getText().trim()));
                            producto.setStock_maximo(Integer.parseInt(Txt_stockMaximo.getText().trim()));
                        } catch (NumberFormatException e) {
                            JOptionPane.showMessageDialog(null, "Formato de precio o número incorrecto. Por favor, revise los valores ingresados.");
                            return; // Detener la ejecución si hay un error de formato
                        }

                        Id_categoria();
                        producto.setId_categoria(obtenerIdCategoriaCombo);
                        
                        if(controlProducto.guardar(producto)){
                            JOptionPane.showMessageDialog(null, "Registro guardado");
                            CargarComboCategoria();
                            Limpiar();
                            
                        }else{
                            JOptionPane.showMessageDialog(null, "Registro al guardar");
                        }
                        
                      }catch (HeadlessException | NumberFormatException e){
                          System.out.println("Error en: " + e);
                    }
                }
                
            }else{
                JOptionPane.showMessageDialog(null, "El producto ya se encuentra registrado");
            }
                
        }
    }//GEN-LAST:event_button_GuardarActionPerformed

    private void Txt_nombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Txt_nombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Txt_nombreActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Txt_cantidadExistente;
    private javax.swing.JTextField Txt_nombre;
    private javax.swing.JTextField Txt_precio;
    private javax.swing.JTextField Txt_stockMaximo;
    private javax.swing.JTextField Txt_stockMinimo;
    private javax.swing.JButton button_Guardar;
    private javax.swing.JComboBox<String> jComboBox_seleccioneCategoria;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    // End of variables declaration//GEN-END:variables

    //limpiar campos
    private void Limpiar(){
        Txt_nombre.setText(""); 
        Txt_precio.setText(""); 
        Txt_cantidadExistente.setText(""); 
        Txt_stockMaximo.setText(""); 
        Txt_stockMinimo.setText(""); 
    }
    
    //cargar items de categoria
    private void CargarComboCategoria(){
        Connection cn = Conexion.conectar();
        String sql = "SELECT * FROM categoria";
        Statement st;
        
        try{
            
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            jComboBox_seleccioneCategoria.removeAllItems();
            jComboBox_seleccioneCategoria.addItem("Seleccione categoria");
            
            while(rs.next()){
                jComboBox_seleccioneCategoria.addItem(rs.getString("descripcion"));
            }
            cn.close();
            
        }catch(SQLException e) {
            System.out.println("Error al cargar categorias");
        }
    }
    private int Id_categoria() {
    String categoriaSeleccionada = jComboBox_seleccioneCategoria.getSelectedItem().toString().trim();

    if (categoriaSeleccionada.equalsIgnoreCase("Seleccione categoria")) {
        return 0;  
    }

    String sql = "SELECT id_categoria FROM categoria WHERE descripcion = '" + categoriaSeleccionada + "'"; 
    Statement st;

    try {
        Connection cn = Conexion.conectar();
        st = cn.createStatement();
        ResultSet rs = st.executeQuery(sql);
        while (rs.next()) {
            obtenerIdCategoriaCombo = rs.getInt("id_categoria"); 
        }
        cn.close();
    } catch (SQLException e) {
        System.out.println("Error al obtener id de categoria: " + e.getMessage());
    }
    return obtenerIdCategoriaCombo;
}

    
}
