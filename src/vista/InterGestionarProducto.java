package vista;

import conexion.Conexion;
import controlador.Ctrl_Producto;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.Producto;

/**
 *
 * @author Admin
 */
public class InterGestionarProducto extends javax.swing.JInternalFrame {

    private int idProducto;
    int obetnerIdCategoriaCombo = 0;
    private int obtenerIdCategoriaCombo;
    private double Precio;

    public InterGestionarProducto() {
        initComponents();
        setSize(new Dimension(900, 550));
        setTitle("Gestionar Producto");
        CargarTablaProductos();
        CargarComboCategoria();
        Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        int x = (screenSize.width - this.getWidth()) / 2;
        int y = (screenSize.height - this.getHeight()) / 2;
        setLocation(x, y);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_productos = new javax.swing.JTable();
        jButton_actualizar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        Txt_precio = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        Txt_cantidadExistente = new javax.swing.JTextField();
        Txt_nombre = new javax.swing.JTextField();
        jComboBox_seleccioneCategoria = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jButton_eliminar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        Txt_stockMaximo = new javax.swing.JTextField();
        Txt_stockMinimo = new javax.swing.JTextField();
        Txt_nombre3 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        Txt_salida = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        Txt_entrada = new javax.swing.JTextField();

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Gestion de Producto");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 20, -1, -1));

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable_productos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable_productos);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 780, 230));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 50, 800, 250));

        jButton_actualizar.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton_actualizar.setText("Actualizar");
        jButton_actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_actualizarActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_actualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 330, 150, 50));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Categoria:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 450, -1, -1));
        getContentPane().add(Txt_precio, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 370, 150, 20));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("Cantidad Existente:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 320, -1, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("Nombre:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 320, -1, -1));
        getContentPane().add(Txt_cantidadExistente, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 320, 150, -1));
        getContentPane().add(Txt_nombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 320, 150, -1));

        jComboBox_seleccioneCategoria.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jComboBox_seleccioneCategoria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Categoria", "Item 2", "Item 3", "Item 4" }));
        jComboBox_seleccioneCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_seleccioneCategoriaActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox_seleccioneCategoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 450, 150, 20));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setText("Precio:");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 370, -1, -1));

        jButton_eliminar.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton_eliminar.setText("Eliminar");
        jButton_eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_eliminarActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_eliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 390, 150, 50));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setText("Stock Minimo:");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 360, -1, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel7.setText("Stock Maximo:");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 410, -1, -1));
        getContentPane().add(Txt_stockMaximo, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 410, 150, -1));
        getContentPane().add(Txt_stockMinimo, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 360, 150, -1));
        getContentPane().add(Txt_nombre3, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 360, 150, -1));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel9.setText("Salida:");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 410, -1, -1));
        getContentPane().add(Txt_salida, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 410, 150, -1));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel8.setText("Entrada:");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 450, -1, -1));
        getContentPane().add(Txt_entrada, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 450, 150, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_eliminarActionPerformed

        Ctrl_Producto controlProducto = new Ctrl_Producto();
        if (idProducto == 0) {
            JOptionPane.showMessageDialog(null, "Seleccione un producto");

        } else {
            if (!controlProducto.eliminar(idProducto)) {
                JOptionPane.showMessageDialog(null, "Producto eliminado");
                CargarTablaProductos();
                CargarComboCategoria();
                Limpiar();

            } else {
                JOptionPane.showMessageDialog(null, "Error al eliminar producto");

            }
        }
    }//GEN-LAST:event_jButton_eliminarActionPerformed

    private void jButton_actualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_actualizarActionPerformed
        Producto producto = new Producto();
        Ctrl_Producto controlProducto = new Ctrl_Producto();
        String categoria = jComboBox_seleccioneCategoria.getSelectedItem().toString().trim();

        // Validar solo los campos obligatorios (excluyendo salida y entrada)
        if (Txt_nombre.getText().isEmpty() || Txt_precio.getText().isEmpty() || Txt_cantidadExistente.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Complete todos los campos obligatorios.");
            return;
        }

        if (categoria.equalsIgnoreCase("Seleccione categoria")) {
            JOptionPane.showMessageDialog(null, "Seleccione una categor√≠a.");
            return;
        }

        try {
            // Procesar el precio
            String precioTXT = Txt_precio.getText().trim().replace(".", "").replace(",", ".");
            double Precio = Double.parseDouble(precioTXT);
            producto.setPrecio(Precio);

            // Obtener valores de cantidad, stock y salida
            int cantidadExistente = Integer.parseInt(Txt_cantidadExistente.getText().trim());
            int stockMinimo = Integer.parseInt(Txt_stockMinimo.getText().trim());
            int stockMaximo = Integer.parseInt(Txt_stockMaximo.getText().trim());

            // Si Txt_salida est√° vac√≠o, asignar 0; si no, obtener el valor ingresado
            int salida = Txt_salida.getText().trim().isEmpty() ? 0 : Integer.parseInt(Txt_salida.getText().trim());

            // Si Txt_entrada est√° vac√≠o, asignar 0; si no, obtener el valor ingresado
            int entrada = Txt_entrada.getText().trim().isEmpty() ? 0 : Integer.parseInt(Txt_entrada.getText().trim());

            // Calcular nueva cantidad existente
            int nuevaCantidadExistente = cantidadExistente;

            // Restar salida si tiene valor
            if (salida > 0) {
                if (salida > cantidadExistente) {
                    JOptionPane.showMessageDialog(null, "La cantidad de salida no puede superar la cantidad existente.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                nuevaCantidadExistente -= salida;
            }

            // Sumar entrada si tiene valor
            if (entrada > 0) {
                nuevaCantidadExistente += entrada;
            }

            // Verificar que la nueva cantidad no supere el stock m√°ximo
            if (!verificarStockMaximo(nuevaCantidadExistente, stockMaximo)) {
                return;
            }

            // Asignar valores al producto
            producto.setNombre(Txt_nombre.getText().trim());
            producto.setCantidad_existente(nuevaCantidadExistente);
            producto.setStock_minimo(stockMinimo);
            producto.setStock_maximo(stockMaximo);
            Id_categoria();  // Obtener id de la categor√≠a
            producto.setId_categoria(obtenerIdCategoriaCombo);

            // Actualizar el producto
            if (controlProducto.actualizar(producto, idProducto)) {
                JOptionPane.showMessageDialog(null, "Registro actualizado");
                CargarComboCategoria();
                CargarTablaProductos(); // Recargar la tabla con los nuevos valores
                Limpiar();
            } else {
                JOptionPane.showMessageDialog(null, "Error al actualizar registro");
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Formato de n√∫mero incorrecto. Por favor, revise los valores ingresados.");
        }

    }//GEN-LAST:event_jButton_actualizarActionPerformed

    private void jComboBox_seleccioneCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_seleccioneCategoriaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox_seleccioneCategoriaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Txt_cantidadExistente;
    private javax.swing.JTextField Txt_entrada;
    private javax.swing.JTextField Txt_nombre;
    private javax.swing.JTextField Txt_nombre3;
    private javax.swing.JTextField Txt_precio;
    private javax.swing.JTextField Txt_salida;
    private javax.swing.JTextField Txt_stockMaximo;
    private javax.swing.JTextField Txt_stockMinimo;
    private javax.swing.JButton jButton_actualizar;
    private javax.swing.JButton jButton_eliminar;
    private javax.swing.JComboBox<String> jComboBox_seleccioneCategoria;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    public static javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable jTable_productos;
    // End of variables declaration//GEN-END:variables

    //metodo limpiar
    private void Limpiar() {
        Txt_nombre.setText("");
        Txt_cantidadExistente.setText("");
        Txt_precio.setText("");
        Txt_stockMinimo.setText("");
        Txt_stockMaximo.setText("");
        jComboBox_seleccioneCategoria.setSelectedItem("Seleccione categoria");
        Txt_salida.setText("");
        Txt_entrada.setText("");
    }

    //metodo para cargar categorias al JCombox  
    private void CargarComboCategoria() {
        Connection cn = Conexion.conectar();
        String sql = "SELECT * FROM categoria";
        Statement st;
        try {
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            jComboBox_seleccioneCategoria.removeAllItems();
            jComboBox_seleccioneCategoria.addItem("Seleccione categoria:");
            while (rs.next()) {
                jComboBox_seleccioneCategoria.addItem(rs.getString("descripcion"));
            }
            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al cargar categorias");
        }
    }

    //metodo para mostrar los productos 
    String descripcionCategoria = "";
    double precio = 0.0;

    private void CargarTablaProductos() {
        DefaultTableModel model = (DefaultTableModel) jTable_productos.getModel();
        model.setColumnIdentifiers(new Object[]{"ID", "Nombre", "Precio", "Cantidad", "Categor√≠a", "Stock Minimo", "Stock Maximo"});
        model.setRowCount(0);

        try (Connection con = Conexion.conectar();
                Statement st = con.createStatement();
                ResultSet rs = st.executeQuery("SELECT p.id_producto, p.nombre, p.precio, p.cantidad_existente, p.stock_minimo, p.stock_maximo, c.descripcion AS categoria FROM producto p JOIN categoria c ON p.categoria_id_categoria = c.id_categoria")) {

            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getInt("id_producto"),
                    rs.getString("nombre"),
                    rs.getDouble("precio"),
                    rs.getInt("cantidad_existente"),
                    rs.getString("categoria"),
                    rs.getInt("stock_minimo"),
                    rs.getInt("stock_maximo")
                });
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al cargar productos: " + e.getMessage());
        }

        // Manejo de clic en fila para seleccionar producto
        jTable_productos.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int fila = jTable_productos.rowAtPoint(e.getPoint());
                if (fila > -1) {
                    idProducto = (int) model.getValueAt(fila, 0);
                    EnviarDatosProductosSeleccionado(idProducto);
                    String categoriaProducto = (String) model.getValueAt(fila, 4);
                    seleccionarCategoriaEnComboBox(categoriaProducto);
                }
            }
        });
    }

    // M√©todo para seleccionar la categor√≠a en el JComboBox
    private void seleccionarCategoriaEnComboBox(String categoriaProducto) {
        for (int i = 0; i < jComboBox_seleccioneCategoria.getItemCount(); i++) {
            if (jComboBox_seleccioneCategoria.getItemAt(i).toString().equals(categoriaProducto)) {
                jComboBox_seleccioneCategoria.setSelectedIndex(i);
                break;
            }
        }
    }

    public void EnviarDatosProductosSeleccionado(int idProducto) {
        try {
            Connection con = Conexion.conectar();
            PreparedStatement pst = con.prepareStatement("SELECT * FROM producto WHERE id_producto = '" + idProducto + "'");
            ResultSet rs = pst.executeQuery();
            if (rs.next()) {
                Txt_nombre.setText(rs.getString("nombre"));
                Txt_precio.setText(rs.getString("precio"));
                Txt_cantidadExistente.setText(rs.getString("cantidad_existente"));
                Txt_stockMinimo.setText(rs.getString("stock_minimo"));
                Txt_stockMaximo.setText(rs.getString("stock_maximo"));

            }
            con.close();
        } catch (SQLException e) {
            System.out.println("Error al seleccionar producto" + e);
        }
    }

    private String relacionarCategoria(int idCategoria) {

        String sql = "SELECT descripcion FROM categoria WHERE id_categoria = '" + idCategoria + "'";
        Statement st;
        try {
            Connection cn = Conexion.conectar();
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);

            while (rs.next()) {
                descripcionCategoria = rs.getString("descripcion");
            }
            cn.close();

        } catch (SQLException e) {
            System.out.println("Error al obtener el id de la categoria");
        }
        return descripcionCategoria;
    }

    private int Id_categoria() {
        String categoriaSeleccionada = jComboBox_seleccioneCategoria.getSelectedItem().toString().trim();

        if (categoriaSeleccionada.equalsIgnoreCase("Seleccione categoria")) {
            return 0;
        }

        String sql = "SELECT id_categoria FROM categoria WHERE descripcion = '" + categoriaSeleccionada + "'";
        Statement st;

        try {
            Connection cn = Conexion.conectar();
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            if (rs.next()) {
                obtenerIdCategoriaCombo = rs.getInt("id_categoria"); // Asigna el valor al atributo de clase
            }
            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al obtener id de categoria: " + e.getMessage());
        }
        return obtenerIdCategoriaCombo; // Retorna el id de la categor√≠a obtenida
    }

    private void verificarStockMinimo() {
        DefaultTableModel model = (DefaultTableModel) jTable_productos.getModel();
        StringBuilder mensaje = new StringBuilder("Los siguientes productos est√°n en su stock m√≠nimo y necesitan reabastecimiento:\n");

        boolean necesitaAlerta = false;

        for (int i = 0; i < model.getRowCount(); i++) {
            int cantidadExistente = (int) model.getValueAt(i, 3); // Columna de cantidad existente
            int stockMinimo = (int) model.getValueAt(i, 5); // Columna de stock m√≠nimo

            if (cantidadExistente <= stockMinimo) {
                String nombreProducto = (String) model.getValueAt(i, 1); // Columna del nombre del producto
                mensaje.append("- ").append(nombreProducto).append("\n");
                necesitaAlerta = true;
            }
        }

        if (necesitaAlerta) {
            JOptionPane.showMessageDialog(this, mensaje.toString(), "Alerta de Stock M√≠nimo", JOptionPane.WARNING_MESSAGE);
        }
    }

    private boolean verificarStockMaximo(int cantidadExistente, int stockMaximo) {
        if (cantidadExistente > stockMaximo) {
            JOptionPane.showMessageDialog(this, "La cantidad existente no puede superar el stock m√°ximo de " + stockMaximo + ".", "Error de Stock M√°ximo", JOptionPane.ERROR_MESSAGE);
            return false; // No permite la actualizaci√≥n si la cantidad excede el stock m√°ximo
        }
        return true; // Permite la actualizaci√≥n si la cantidad es v√°lida
    }

}
